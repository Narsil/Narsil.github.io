{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","app","display","justifyContent","alignItems","height","card","breakpoints","up","padding","minWidth","text","fontSize","lineHeight","root","margin","spacing","App","classes","useState","setText","time","setTime","className","Card","noValidate","autoComplete","Grid","container","item","xs","TextField","InputProps","input","id","label","fullWidth","multiline","autoFocus","onChange","event","clearTimeout","target","value","timeout","setTimeout","form","FormData","append","fetch","method","body","then","response","json","console","log","translate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mQAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,IAAK,CACDC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,SAEZC,KAAK,eACAN,EAAMO,YAAYC,GAAG,MAAQ,CAC1BC,QAAS,MACTC,SAAU,QAGlBC,KAAM,CAAEC,SAAU,OAAQC,WAAY,QACtCC,KAAM,CACF,uBAAwB,CACpBC,OAAQf,EAAMgB,QAAQ,SA+EnBC,MAxEf,WACI,IAAMC,EAAUpB,IADL,EAEaqB,mBAAS,IAFtB,mBAEJR,EAFI,KAEES,EAFF,OAGaD,mBAAyB,MAHtC,mBAGJE,EAHI,KAGEC,EAHF,KAsBX,OACI,yBAAKC,UAAWL,EAAQjB,KACpB,kBAACuB,EAAA,EAAD,CAAMD,UAAWL,EAAQZ,MACrB,0BAAMiB,UAAWL,EAAQJ,KAAMW,YAAU,EAACC,aAAa,OACnD,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACZ,QAAS,GACrB,kBAACW,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CACIC,WAAY,CACRd,QAAS,CACLe,MAAOf,EAAQP,OAGvBuB,GAAG,iBACHC,MAAM,QACNC,WAAS,EACTC,WAAS,EACTC,WAAS,EACTC,SAAU,SAAAC,GACO,OAATnB,GACAoB,aAAapB,GAEjB,IAAMV,EAAO6B,EAAME,OAAOC,MACpBC,EAAUC,YAAW,YAvCzC,SAAClC,GACf,GAAa,KAATA,EAAJ,CAIA,IAAMmC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,QAASrC,GACrBsC,MARQ,iCAQG,CACPC,OAAQ,OACRC,KAAML,IACPM,MAAK,SAAAC,GACJA,EAASC,OAAOF,MAAK,SAAAE,GACjBC,QAAQC,IAAIF,GACZlC,EAAQkC,EAAI,eAXhBlC,EAAQ,IAsCoBqC,CAAU9C,KACX,KACHW,EAAQsB,OAIpB,kBAACjB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CACIC,WAAY,CACRd,QAAS,CACLe,MAAOf,EAAQP,OAGvBuB,GAAG,iBACHC,MAAM,UACNC,WAAS,EACTC,WAAS,EACTM,MAAOhC,UChFnB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.e9582362.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n    app: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\"\n    },\n    card: {\n        [theme.breakpoints.up(\"md\")]: {\n            padding: \"3em\",\n            minWidth: \"65%\"\n        }\n    },\n    text: { fontSize: \"20px\", lineHeight: \"20px\" },\n    root: {\n        \"& .MuiTextField-root\": {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\ntype Timeout = ReturnType<typeof setTimeout>;\n\nfunction App() {\n    const classes = useStyles();\n    const [text, setText] = useState(\"\");\n    const [time, setTime] = useState<Timeout | null>(null);\n    const url = \"https://translate.ottomate.app\";\n    const translate = (text: string) => {\n        if (text === \"\") {\n            setText(\"\");\n            return;\n        }\n        const form = new FormData();\n        form.append(\"input\", text);\n        fetch(url, {\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n            body: form // body data type must match \"Content-Type\" header\n        }).then(response => {\n            response.json().then(json => {\n                console.log(json);\n                setText(json[\"en\"]);\n            });\n        });\n    };\n    return (\n        <div className={classes.app}>\n            <Card className={classes.card}>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <Grid container spacing={5}>\n                        <Grid item xs={6}>\n                            <TextField\n                                InputProps={{\n                                    classes: {\n                                        input: classes.text\n                                    }\n                                }}\n                                id=\"standard-basic\"\n                                label=\"Dutch\"\n                                fullWidth\n                                multiline\n                                autoFocus\n                                onChange={event => {\n                                    if (time !== null) {\n                                        clearTimeout(time);\n                                    }\n                                    const text = event.target.value;\n                                    const timeout = setTimeout(() => {\n                                        translate(text);\n                                    }, 500);\n                                    setTime(timeout);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                InputProps={{\n                                    classes: {\n                                        input: classes.text\n                                    }\n                                }}\n                                id=\"standard-basic\"\n                                label=\"English\"\n                                fullWidth\n                                multiline\n                                value={text}\n                            />\n                        </Grid>\n                    </Grid>\n                </form>\n            </Card>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}